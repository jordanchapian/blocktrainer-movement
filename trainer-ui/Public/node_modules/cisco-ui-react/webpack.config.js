const webpack = require('webpack');
const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;
const UglifyJsPlugin = webpack.optimize.UglifyJsPlugin;
const path = require('path');

const env = process.env.NODE_ENV || 'local';

var config = {
  devtool: (process.env.NODE_ENV === 'development') ? "inline-source-map" : "cheap-module-source-map",

  entry: __dirname + '/src/index.jsx',

  output: {
    path: __dirname + '/build/',
    filename: "index.js",
    libraryTarget: 'umd',
  },

  module: {
    rules: [
      {
        test: /\.(s?css)$/,
        use: ['style-loader', 'css-loader', 'sass-loader']
      }, {
        test: /(\.jsx|\.js)$/,
        exclude: /(cisco-react-ui\/node_modules|bower_components)/,
        use: {
          loader: 'babel-loader',
          options: {
            presets: ['es2015', 'react']
          }
        }
      }, {
        test: /\.(jpe?g|gif|png|svg|woff|ttf|eot|woff2)$/,
        loader: "file-loader",
        options: {
          name: 'static/[name].[ext]'
        }
      }
    ]
  },

  resolve: {
    modules: [
        path.resolve('./node_modules'),
        path.resolve('./src')
    ],
    extensions: ['.json', '.js']
  },

  plugins: [
    new webpack.DefinePlugin({
      'process.env': {
        NODE_ENV: JSON.stringify(env)
      }
    }),
    new BundleAnalyzerPlugin({
      analyzerMode: 'static',
      openAnalyzer: false
    }),
    // new webpack.optimize.CommonsChunkPlugin({
    //   name: 'vendor' // Specify the common bundle's name.
    // }),
  ]
};

if (env === 'production') {
  config.plugins.push(
    new webpack.optimize.UglifyJsPlugin({
      compress: {
        unused: true,
        dead_code: true,
        warnings: false,
      },
    })
  )
}


process.noDeprecation = true;
module.exports = config;


import React  from 'react';

import Icon from './Icon.jsx';
import Required from './Required.jsx';
import FormGroup from './FormGroup.jsx';

import PropTypes from 'prop-types';
import CUI_CONST from './CiscoUIConstants.jsx';

/**
 * type can be any of these:
 *   text, number, password, tel, url, date, month, time, email, week
 **/
class Input extends React.Component {

    constructor(props) {
        super(props);

        this.state = {
            value: props.value,
            disabled: props.disabled,
            required: props.required,
            classes: [],
            help: null,
            is_warning: false,
        };

        this.onChange = this.onChange.bind(this);
        this.onBlur = this.onBlur.bind(this);
    }

    // changes this.state.classes and thats all
    validate(){

        let classes = [];

        let original_value = this.props.value;
        let value = this.state.value;

        let is_required = this.state.required;
        let is_valid = this.el_input.validity.valid;
        let is_original_value = (original_value === value);

        let invalid_message;
        let is_warning = false;
        let is_required_and_empty = false;

        if(!is_original_value){
            classes.push('input--dirty');
        }

        try {
            // if validation already failed and its required and empty, throw required field err
            if(!is_valid && is_required && !value){
                let err = new Error(`This is a required field`);
                err.is_warning = true;
                is_required_and_empty = true;
                throw err;
            }

            // run real validation func to check for thrown errors
            this.props.validationFn(value);

            if(!is_valid) {
                throw new Error(`value does not match validation against '${this.props.type}'`);
            }
        } catch(err){
            is_valid = false;
            invalid_message = err.message;
            is_warning = err.is_warning;
        }

        // if its all valid, return early
        if(is_valid) {

            classes.push('input--valid');

            this.setState({
                classes: classes,
                help: null,
                is_warning: false,
            });

            return;
        }

        classes.push('input--invalid');

        if(is_required_and_empty) {
            classes.push('input--invalid-required');
        }

        this.setState({
            help: invalid_message,
            classes: classes,
            is_warning: is_warning,
        });
    }

    onBlur(){
        this.validate();
    }

    onChange(event){
        this.props.onChange(event, event.target.value);
        return this.setState({value: event.target.value});
    }

    render() {
        return (
            <FormGroup>

                <div className="form-group__text" disabled={this.state.disabled}>
                    <input
                        className={this.state.classes.join(' ')}
                        type={this.props.type}
                        id={this.props.id}
                        name={this.props.name || this.props.id}

                        required={this.state.required}
                        value={this.state.value}
                        disabled={this.state.disabled}

                        onChange={this.onChange}
                        onBlur={this.onBlur}

                        defaultValue={this.props.defaultValue}

                        ref={(input) => { this.el_input = input}}
                    />

                    {this.props.label &&
                        <label htmlFor={this.props.id}>
                            {this.props.label}
                        </label>
                    }

                    {this.props.required &&
                        <Required
                            className={this.props.type}
                            title={this.props.required_title}
                        />
                    }
                </div>

                {this.state.help &&
                    <div className={'help-block ' + (this.state.is_warning ? 'text-warning' : 'text-danger')}>
                        <Icon icon={this.state.is_warning ? 'exclamation-circle' : 'error'} />
                        <span>{this.state.help}</span>
                    </div>
                }
            </FormGroup>
        )
    }
}

Input.defaultProps = {
    type: 'text',
    // value: '',
    disabled: false,
    required: false,
    required_title: null,
    validationFn: function(){},
    onChange: function(){}
};


Input.propTypes = {
    id: PropTypes.string,
    name: PropTypes.string,
    type: PropTypes.oneOf(CUI_CONST.INPUT_TYPES).isRequired,
    disabled: PropTypes.bool,
    required: PropTypes.bool,
    value: PropTypes.oneOfType([
        PropTypes.number,
        PropTypes.string,
    ]),
    label: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.element
    ]),
    required_title: PropTypes.string,
    validationFn: PropTypes.func,
    onChange: PropTypes.func,
};

export default Input;
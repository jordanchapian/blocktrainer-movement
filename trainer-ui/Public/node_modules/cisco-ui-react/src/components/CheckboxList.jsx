
import React  from 'react';
import FormGroup from './FormGroup.jsx';
import Checkbox from './Checkbox.jsx';

import _ from 'lodash';

import PropTypes from 'prop-types';

import CUI_CONST from './CiscoUIConstants.jsx';
/**
 * CheckboxList
 */
class CheckboxList extends React.Component {

    constructor(props) {
        super(props);

        this.state = {
            disabled: props.disabled,
            required: props.required,
            value: props.value,
        };

        console.log(333, props.checkboxes)

        if(!_.isArray(this.state.value)){
            if(_.isUndefined(this.state.value)) {
                this.state.value = [];
            } else {
                this.state.value = [this.state.value];
            }
        }
    }

    onChange(event) {
        console.log(111, event);
        // console.log()
    }

    render() {
        let disabled = this.state.disabled;
        let required = this.state.required;
        let checked_arr = this.state.value;

        let checkboxes = this.props.checkboxes.map((checkbox) =>
            <Checkbox
                key={checkbox.value || checkbox}
                label={checkbox.label || checkbox}
                disabled={disabled}
                checked={_.includes(checked_arr, (checkbox.value || checkbox))}
                required={required}
                value={checkbox.value || checkbox}
                onChange={this.onChange.bind(this, checkbox.value || checkbox)}
            />
        );

        return (
            <FormGroup>
                {checkboxes}
            </FormGroup>
        )
    }
}

CheckboxList.defaultProps = {
    checkboxes: [],
    value: [],
    disabled: false,
    required: false,
};


CheckboxList.propTypes = {
    checkboxes: PropTypes.arrayOf(
        PropTypes.oneOfType([
            PropTypes.number,
            PropTypes.string,
            PropTypes.shape({
                value: PropTypes.oneOfType([
                    PropTypes.number,
                    PropTypes.string,
                ]),
                label: PropTypes.oneOfType([
                    PropTypes.number,
                    PropTypes.string,
                ]),
            })
        ])
    ),
    disabled: PropTypes.bool,
    required: PropTypes.bool,
    value: PropTypes.oneOfType([
        PropTypes.arrayOf(
            PropTypes.oneOfType([
                PropTypes.number,
                PropTypes.string,
            ])
        ),
        PropTypes.number,
        PropTypes.string,
    ]),
};

export default CheckboxList;
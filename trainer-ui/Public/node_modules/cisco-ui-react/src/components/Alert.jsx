
import React from 'react';
import Icon from './Icon.jsx';
import PropTypes from 'prop-types';
import CUI_CONST from './CiscoUIConstants.jsx';

/**
 * @class Alert
 * @extends React.Component
 * @property severity {String} default Alert.SEVERITY.INFO
 * @property theme {String} optional
 * @property icon {String} default Alert.ICON.INFO
 * @property dismissHandler {Function} callback when close button is clicked.
 * @property children {Mixed} the content enclosed in the tag.
 */
class Alert extends React.Component {

    dismiss(){
        if(this.props.dismissHandler instanceof Function) {
            this.props.dismissHandler(this);
        }
    }

    render() {
        let closeIcon, classes = ['alert'];

        /* handling all the possibilities for styling  still allows for the user to override */
        if(this.props.severity){
            if(this.props.theme) {
                classes.push(`alert--${this.props.severity}-${this.props.theme}`);
            }else{
                classes.push(`alert--${this.props.severity}`);
            }
        }

        /*
         * Check to be sure this is a function because calling
         * a random type might cause Uncaught TypeError
         */
        if(this.props.dismissHandler instanceof Function){
            closeIcon = <Icon icon="close" onClick={this.dismiss.bind(this)}/>
        }

        this.ele = (<div className={classes.join(' ')}>
            <Icon icon={this.props.icon} />
            <div className="alert__message">{this.props.children}</div>
            {closeIcon}
        </div>);

        return this.ele;
    }
}

/**
 * Convenience classes, No need to worry about the severity or icon.
 *
 * @class WarningAlert
 * @extends Alert
 * @property theme {String} optional
 * @property dismissHandler {Function} optional
 *
 * <WarningAlert background="Optional String" dismissHandler="Optional Function">Warning Message</WarningAlert>
 */
class WarningAlert extends Alert {
    render() {
        return <Alert theme={this.props.theme} severity={Alert.SEVERITY.WARNING} icon={Alert.ICON.WARNING} dismissHandler={this.props.dismissHandler}>{this.props.children}</Alert>
    }
}

/**
 * @class WarningAlert
 * @extends Alert
 * @property theme {String} optional
 * @property dismissHandler {Function} optional
 *
 * <InfoAlert background="Optional String" dismissHandler="Optional Function">Warning Message</InfoAlert>
 */
class InfoAlert extends Alert {
    render() {
        return <Alert theme={this.props.theme} severity={Alert.SEVERITY.INFO} icon={Alert.ICON.INFO} dismissHandler={this.props.dismissHandler}>{this.props.children}</Alert>
    }
}

/**
 * @class SuccessAlert
 * @extends Alert
 * @property theme {String} optional
 * @property dismissHandler {Function} optional
 *
 * <SuccessAlert background="Optional String" dismissHandler="Optional Function">Warning Message</SuccessAlert>
 */
class SuccessAlert extends Alert {
    render() {
        return <Alert theme={this.props.theme} severity={Alert.SEVERITY.SUCCESS} icon={Alert.ICON.SUCCESS} dismissHandler={this.props.dismissHandler}>{this.props.children}</Alert>
    }
}

/**
 * @class WarningAlert
 * @extends Alert
 * @property theme {String} optional
 * @property dismissHandler {Function} optional
 *
 * <DangerAlert background="Optional String" dismissHandler="Optional Function">Warning Message</DangerAlert>
 */
class DangerAlert extends Alert {
    render() {
        return <Alert theme={this.props.theme} severity={Alert.SEVERITY.DANGER} icon={Alert.ICON.DANGER} dismissHandler={this.props.dismissHandler}>{this.props.children}</Alert>
    }
}

/**
 * @constant Alert.SEVERITY
 * @type {Object}
 *  INFO: string,
 *  SUCCESS: string,
 *  WARNING: string,
 *  DANGER: string
 */
Alert.SEVERITY = {
    INFO: 'info',
    SUCCESS: 'success',
    WARNING: 'warning',
    DANGER: 'danger'
};

/**
 * @constant Alert.ICON
 * @type {}Object
 *     INFO: string,
 *     SUCCESS: string,
 *     WARNING: string,
 *     DANGER: string
 */
Alert.ICON = {
    INFO: 'info-circle',
    SUCCESS: 'check',
    WARNING: 'exclamation-triangle',
    DANGER: 'error'
};

Alert.defaultProps = {
    severity: Alert.SEVERITY.INFO,
    icon: Alert.ICON.INFO,
    onClose: null,
};

Alert.propTypes = {
    severity: PropTypes.oneOf(CUI_CONST.ALERT_COLORS),
    icon: PropTypes.string,
    onClose: PropTypes.func,
};

/* Might be better to not export Alert but for now */
export default Alert;
export { InfoAlert, SuccessAlert, WarningAlert, DangerAlert };
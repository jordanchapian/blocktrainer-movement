
import React  from 'react';
import PropTypes from 'prop-types';
import CUI_CONST from './CiscoUIConstants.jsx';

import Radio from './Radio.jsx';

import _ from 'lodash';

/**
 * RadioGroup
 */
class RadioGroup extends React.Component {

    constructor(props) {
        super(props);

        this.state = {
            value: props.defaultValue || '',
            isControlled: (!_.isUndefined(props.value) && _.isUndefined(props.defaultValue)),
        };

        this.handleChange = this.handleChange.bind(this, props.onChange);
    }

    handleChange(parentOnChange, e) {
        // e.preventDefault();

        let new_value = e.target.value;

        if(this.state.isControlled){
            parentOnChange(e, new_value);
            return;
        }

        this.setState({
            value: new_value,
        });
    }

    render() {

        let disabled = this.props.disabled;
        let layout = this.props.layout;
        let name = this.props.name;
        let id = this.props.id;

        let selected_value;

        // if props.value is set, its a controlled component
        if(this.state.isControlled) {
            selected_value = this.props.value;
        } else {
            selected_value = this.state.value;
        }

        selected_value = selected_value.toString();

        let handleChange = this.handleChange;

        let Wrapper = this.props.wrapper;

        let RadioWrapper;

        if(this.props.radioWrapper) {
            RadioWrapper = this.props.radioWrapper;
        }

        let items = this.props.items.map((radio)=>{

            let value = radio.value;

            if(typeof value === 'undefined') {
                value = radio;
            }
            value = value.toString();

            let label = radio.label || radio;

            let dataProps = _.pickBy(radio, function(val, key){
                return /^data/i.test(key);
            });

            let out = (
                <Radio
                    key={value}
                    label={label}
                    value={value}
                    checked={selected_value === value}
                    // id={id}
                    // name={name}
                    layout={layout}
                    disabled={disabled}
                    onChange={handleChange}

                    {...dataProps}
                />
            );

            if(RadioWrapper){
                return (
                    <RadioWrapper
                        key={`RadioWrapper---${value}`}
                        selected={selected_value === value}
                        value={value}
                        selected_value={selected_value}

                        {...this.props.radioWrapperProps}
                    >
                        {out}
                    </RadioWrapper>
                );
            }

            return out;
        });

        return (
            <Wrapper>
                {items}
            </Wrapper>
        )
    }
}

class DefaultWrapper extends React.Component {
    render(){
        return (
            <div>
                {this.props.children}
            </div>
        )
    }
}

RadioGroup.defaultProps = {
    disabled: false,
    value: '',
    layout: 'inline',
    items: [],
    onChange: function(){},
    radioWrapper: null,
    wrapper: DefaultWrapper,
};


RadioGroup.propTypes = {
    id: PropTypes.string,
    name: PropTypes.string,
    disabled: PropTypes.bool,
    checked: PropTypes.bool,
    required: PropTypes.bool,
    defaultValue: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number,
    ]),
    value: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.number,
    ]),
    layout: PropTypes.oneOf(CUI_CONST.RADIO_LAYOUTS),
    items: PropTypes.arrayOf(
        PropTypes.oneOfType([
            PropTypes.number,
            PropTypes.string,
            PropTypes.shape({
                value: PropTypes.oneOfType([
                    PropTypes.number,
                    PropTypes.string,
                ]),
                label: PropTypes.oneOfType([
                    PropTypes.number,
                    PropTypes.string,
                ]),
            })
        ])
    ),
    onChange: PropTypes.func,
    radioWrapper: PropTypes.func,
    wrapper: PropTypes.func,
};

export default RadioGroup;